import { promises as fs } from "fs"
import path from "path"

import { registrySchema } from "@/lib/registry/schema"
import dedent from "dedent"
import chokidar from "chokidar"
import { REGISTRY_PATH } from "@/lib/registry/registry"

// Initialize an empty watcher if in watch mode.
const isWatchMode = process.argv.includes("--watch")
const watcher = chokidar.watch(REGISTRY_PATH, {
  ignored: (path) => {
    return path.endsWith("__index__.tsx")
  },
  awaitWriteFinish: {
    stabilityThreshold: 50,
    pollInterval: 50,
  },
  persistent: true,
  ignoreInitial: true,
})

// Add watch handlers
if (isWatchMode) {
  console.log("ðŸ‘€ Watching for changes...")
  watcher.on("change", buildTemplates)
  watcher.on("add", buildTemplates)
} else {
  console.log("ðŸ”¨ Building registry...")
  await buildTemplates()
  console.log("âœ… Done")
  process.exit(0)
}

// ----------------------------------------------------------------------------
// Build __index__.tsx.
// ----------------------------------------------------------------------------
async function buildTemplates() {
  const { registry } = await import(`${REGISTRY_PATH}/index.ts?v=${Date.now()}`)
  const result = registrySchema.safeParse(registry)

  if (!result.success) {
    console.error(result.error)
    return
  }

  const chunks: string[] = [
    dedent`// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
// This file is autogenerated by ./scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"
import { RegistryIndex } from "../lib/schema"

export const index: RegistryIndex = {
`,
  ]

  // Build style index using array joins instead of string concatenation
  for (const item of result.data) {
    chunks.push(`
  "${item.name}": {
    name: "${item.name}",
    title: "${item.title ?? item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: ${JSON.stringify(item.files)},
    meta: {
      ${item.meta ? `...${JSON.stringify(item.meta)},` : ""}
      component: React.lazy(() => import("${REGISTRY_PATH}/${
      item.files[0].path
    }")),
    },
  },`)
  }

  chunks.push(`\n}\n`)

  // Write style index
  await fs.writeFile(
    path.join(process.cwd(), "lib/registry/__index__.tsx"),
    chunks.join("")
  )
}
