[
  {
    "name": "word-reveal",
    "type": "registry:ui",
    "code": "\"use client\";\n\nimport { motion, Variants } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface WordRevealProps {\n  text: string;\n  className?: string;\n  delay?: number;\n}\n\nexport default function WordReveal({\n  text,\n  className,\n  delay = 0.15,\n}: WordRevealProps) {\n  const words = text.split(\" \");\n\n  const container: Variants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: { staggerChildren: delay },\n    },\n  };\n\n  const child: Variants = {\n    hidden: {\n      opacity: 0,\n      filter: \"blur(10px)\",\n      y: 20,\n    },\n    visible: (i: number) => ({\n      opacity: 1,\n      filter: \"blur(0px)\",\n      y: 0,\n      transition: {\n        delay: i * delay,\n        type: \"spring\",\n        damping: 12,\n        stiffness: 100,\n      },\n    }),\n  };\n\n  return (\n    <motion.h1\n      variants={container}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className={cn(\n        \"font-display text-center text-4xl font-bold tracking-[-0.02em] text-white drop-shadow-sm md:text-7xl md:leading-[5rem]\",\n        className\n      )}\n    >\n      {words.map((word, i) => (\n        <motion.span\n          key={word + i}\n          variants={child}\n          custom={i}\n          className=\"inline-block mr-[0.25em] last:mr-0\"\n        >\n          {word}\n        </motion.span>\n      ))}\n    </motion.h1>\n  );\n}",
    "files": [
      {
        "path": "components/prismui/word-reveal.tsx",
        "type": "registry:ui",
        "content": "\"use client\";\n\nimport { motion, Variants } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface WordRevealProps {\n  text: string;\n  className?: string;\n  delay?: number;\n}\n\nexport default function WordReveal({\n  text,\n  className,\n  delay = 0.15,\n}: WordRevealProps) {\n  const words = text.split(\" \");\n\n  const container: Variants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: { staggerChildren: delay },\n    },\n  };\n\n  const child: Variants = {\n    hidden: {\n      opacity: 0,\n      filter: \"blur(10px)\",\n      y: 20,\n    },\n    visible: (i: number) => ({\n      opacity: 1,\n      filter: \"blur(0px)\",\n      y: 0,\n      transition: {\n        delay: i * delay,\n        type: \"spring\",\n        damping: 12,\n        stiffness: 100,\n      },\n    }),\n  };\n\n  return (\n    <motion.h1\n      variants={container}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className={cn(\n        \"font-display text-center text-4xl font-bold tracking-[-0.02em] text-white drop-shadow-sm md:text-7xl md:leading-[5rem]\",\n        className\n      )}\n    >\n      {words.map((word, i) => (\n        <motion.span\n          key={word + i}\n          variants={child}\n          custom={i}\n          className=\"inline-block mr-[0.25em] last:mr-0\"\n        >\n          {word}\n        </motion.span>\n      ))}\n    </motion.h1>\n  );\n}"
      }
    ],
    "dependencies": [
      "framer-motion"
    ],
    "category": "components",
    "subcategory": "animation"
  },
  {
    "name": "card",
    "type": "registry:ui",
    "code": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  /** Optional hover effect */\n  hover?: boolean;\n  /** Optional gradient background */\n  gradient?: boolean;\n  /** Optional border style */\n  bordered?: boolean;\n}\n\nexport default function Card({\n  className,\n  hover = false,\n  gradient = false,\n  bordered = false,\n  children,\n  ...props\n}: CardProps) {\n  return (\n    <div\n      className={cn(\n        \"rounded-lg bg-card p-6\",\n        {\n          \"transition-all duration-200 hover:scale-[1.02] hover:shadow-lg\": hover,\n          \"bg-gradient-to-br from-card/50 to-card\": gradient,\n          \"border border-border\": bordered,\n        },\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\ninterface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function CardHeader({ className, ...props }: CardHeaderProps) {\n  return <div className={cn(\"mb-4\", className)} {...props} />;\n}\n\ninterface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\n\nexport function CardTitle({ className, ...props }: CardTitleProps) {\n  return (\n    <h3\n      className={cn(\"text-2xl font-semibold tracking-tight\", className)}\n      {...props}\n    />\n  );\n}\n\ninterface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport function CardDescription({ className, ...props }: CardDescriptionProps) {\n  return (\n    <p\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n}\n\ninterface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function CardContent({ className, ...props }: CardContentProps) {\n  return <div className={cn(\"\", className)} {...props} />;\n}\n\ninterface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function CardFooter({ className, ...props }: CardFooterProps) {\n  return (\n    <div\n      className={cn(\"mt-4 flex items-center justify-between\", className)}\n      {...props}\n    />\n  );\n}",
    "files": [
      {
        "path": "components/prismui/card.tsx",
        "type": "registry:ui",
        "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  /** Optional hover effect */\n  hover?: boolean;\n  /** Optional gradient background */\n  gradient?: boolean;\n  /** Optional border style */\n  bordered?: boolean;\n}\n\nexport default function Card({\n  className,\n  hover = false,\n  gradient = false,\n  bordered = false,\n  children,\n  ...props\n}: CardProps) {\n  return (\n    <div\n      className={cn(\n        \"rounded-lg bg-card p-6\",\n        {\n          \"transition-all duration-200 hover:scale-[1.02] hover:shadow-lg\": hover,\n          \"bg-gradient-to-br from-card/50 to-card\": gradient,\n          \"border border-border\": bordered,\n        },\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\ninterface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function CardHeader({ className, ...props }: CardHeaderProps) {\n  return <div className={cn(\"mb-4\", className)} {...props} />;\n}\n\ninterface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\n\nexport function CardTitle({ className, ...props }: CardTitleProps) {\n  return (\n    <h3\n      className={cn(\"text-2xl font-semibold tracking-tight\", className)}\n      {...props}\n    />\n  );\n}\n\ninterface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport function CardDescription({ className, ...props }: CardDescriptionProps) {\n  return (\n    <p\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n}\n\ninterface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function CardContent({ className, ...props }: CardContentProps) {\n  return <div className={cn(\"\", className)} {...props} />;\n}\n\ninterface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function CardFooter({ className, ...props }: CardFooterProps) {\n  return (\n    <div\n      className={cn(\"mt-4 flex items-center justify-between\", className)}\n      {...props}\n    />\n  );\n}"
      }
    ],
    "dependencies": [],
    "category": "components",
    "subcategory": "layout"
  },
  {
    "name": "logo-carousel",
    "type": "registry:ui",
    "code": "\"use client\";\n\nimport { motion, Variants } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LogoCarouselProps {\n  logos: Logo[];\n}\n\nexport default function LogoCarousel({ logos }: LogoCarouselProps) {\n  return <div>Logo Carousel</div>;\n}",
    "files": [
      {
        "path": "components/prismui/logo-carousel.tsx",
        "type": "registry:ui",
        "content": "\"use client\";\n\nimport { motion, Variants } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LogoCarouselProps {\n  logos: Logo[];\n}\n\nexport default function LogoCarousel({ logos }: LogoCarouselProps) {\n  return <div>Logo Carousel</div>;\n}"
      }
    ],
    "dependencies": [
      "framer-motion"
    ],
    "category": "components",
    "subcategory": "display"
  },
  {
    "name": "floating-action-panel",
    "type": "registry:ui",
    "code": "\"use client\";\n\nimport * as React from \"react\";\nimport { AnimatePresence, MotionConfig, motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nconst TRANSITION = {\n  type: \"spring\",\n  bounce: 0.1,\n  duration: 0.4,\n};\n\ninterface FloatingActionPanelContextType {\n  isOpen: boolean;\n  openPanel: (rect: DOMRect, mode: \"actions\" | \"note\") => void;\n  closePanel: () => void;\n  uniqueId: string;\n  triggerRect: DOMRect | null;\n  title: string;\n  setTitle: (title: string) => void;\n  note: string;\n  setNote: (note: string) => void;\n  mode: \"actions\" | \"note\";\n}\n\nconst FloatingActionPanelContext = React.createContext<\n  FloatingActionPanelContextType | undefined\n>(undefined);\n\nfunction useFloatingActionPanelLogic() {\n  const uniqueId = React.useId();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [triggerRect, setTriggerRect] = React.useState<DOMRect | null>(null);\n  const [title, setTitle] = React.useState(\"\");\n  const [note, setNote] = React.useState(\"\");\n  const [mode, setMode] = React.useState<\"actions\" | \"note\">(\"actions\");\n\n  const openPanel = (rect: DOMRect, newMode: \"actions\" | \"note\") => {\n    setTriggerRect(rect);\n    setMode(newMode);\n    setIsOpen(true);\n  };\n  const closePanel = () => {\n    setIsOpen(false);\n    setNote(\"\");\n  };\n\n  return {\n    isOpen,\n    openPanel,\n    closePanel,\n    uniqueId,\n    triggerRect,\n    title,\n    setTitle,\n    note,\n    setNote,\n    mode,\n  };\n}\n\ninterface FloatingActionPanelRootProps {\n  children: (context: FloatingActionPanelContextType) => React.ReactNode;\n  className?: string;\n}\n\nexport function FloatingActionPanelRoot({\n  children,\n  className,\n}: FloatingActionPanelRootProps) {\n  const floatingPanelLogic = useFloatingActionPanelLogic();\n\n  return (\n    <FloatingActionPanelContext.Provider value={floatingPanelLogic}>\n      <MotionConfig transition={TRANSITION}>\n        <div className={cn(\"relative\", className)}>\n          {children(floatingPanelLogic)}\n        </div>\n      </MotionConfig>\n    </FloatingActionPanelContext.Provider>\n  );\n}\n\ninterface FloatingActionPanelTriggerProps {\n  children: React.ReactNode;\n  className?: string;\n  title: string;\n  mode: \"actions\" | \"note\";\n}\n\nexport function FloatingActionPanelTrigger({\n  children,\n  className,\n  title,\n  mode,\n}: FloatingActionPanelTriggerProps) {\n  const { openPanel, uniqueId, setTitle } = React.useContext(FloatingActionPanelContext)!;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n\n  const handleClick = () => {\n    if (triggerRef.current) {\n      openPanel(triggerRef.current.getBoundingClientRect(), mode);\n      setTitle(title);\n    }\n  };\n\n  return (\n    <motion.button\n      ref={triggerRef}\n      layoutId={`floating-panel-trigger-${uniqueId}-${mode}`}\n      className={cn(\n        \"flex h-9 items-center rounded-md border border-zinc-200 bg-white px-3 text-sm font-medium text-zinc-900 shadow-sm hover:bg-zinc-50 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50 dark:hover:bg-zinc-800\",\n        className\n      )}\n      onClick={handleClick}\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n    >\n      {children}\n    </motion.button>\n  );\n}\n\ninterface FloatingActionPanelContentProps {\n  children?: React.ReactNode;\n  className?: string;\n}\n\nexport function FloatingActionPanelContent({\n  children,\n  className,\n}: FloatingActionPanelContentProps) {\n  const { isOpen, closePanel, uniqueId, triggerRect, title, mode } =\n    React.useContext(FloatingActionPanelContext)!;\n  const contentRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        contentRef.current &&\n        !contentRef.current.contains(event.target as Node)\n      ) {\n        closePanel();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [closePanel]);\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") closePanel();\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [closePanel]);\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            initial={{ backdropFilter: \"blur(0px)\" }}\n            animate={{ backdropFilter: \"blur(4px)\" }}\n            exit={{ backdropFilter: \"blur(0px)\" }}\n            className=\"fixed inset-0 z-40 bg-black/5\"\n          />\n          <motion.div\n            ref={contentRef}\n            layoutId={`floating-panel-${uniqueId}-${mode}`}\n            className={cn(\n              \"fixed z-50 min-w-[200px] overflow-hidden rounded-lg border border-zinc-200 bg-white shadow-lg outline-none dark:border-zinc-800 dark:bg-zinc-950\",\n              className\n            )}\n            style={{\n              left: triggerRect ? triggerRect.left : \"50%\",\n              top: triggerRect ? triggerRect.bottom + 8 : \"50%\",\n              transformOrigin: \"top left\",\n            }}\n            initial={{ opacity: 0, scale: 0.9, y: -8 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.9, y: -8 }}\n          >\n            <div className=\"px-4 py-3 font-medium\">{title}</div>\n            {children}\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n}\n\ninterface FloatingActionPanelButtonProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n  className?: string;\n}\n\nexport function FloatingActionPanelButton({\n  children,\n  onClick,\n  className,\n}: FloatingActionPanelButtonProps) {\n  return (\n    <motion.button\n      className={cn(\n        \"flex w-full items-center gap-2 rounded-md px-2 py-1.5 text-sm text-zinc-900 hover:bg-zinc-100 dark:text-zinc-50 dark:hover:bg-zinc-800\",\n        className\n      )}\n      onClick={onClick}\n      whileHover={{ backgroundColor: \"rgba(0, 0, 0, 0.05)\" }}\n      whileTap={{ scale: 0.98 }}\n    >\n      {children}\n    </motion.button>\n  );\n}\n\ninterface FloatingActionPanelFormProps {\n  children: React.ReactNode;\n  onSubmit?: (note: string) => void;\n  className?: string;\n}\n\nexport function FloatingActionPanelForm({\n  children,\n  onSubmit,\n  className,\n}: FloatingActionPanelFormProps) {\n  const { note, closePanel } = React.useContext(FloatingActionPanelContext)!;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit?.(note);\n    closePanel();\n  };\n\n  return (\n    <form\n      className={cn(\"flex h-full flex-col\", className)}\n      onSubmit={handleSubmit}\n    >\n      {children}\n    </form>\n  );\n}\n\ninterface FloatingActionPanelTextareaProps {\n  className?: string;\n  id?: string;\n}\n\nexport function FloatingActionPanelTextarea({\n  className,\n  id,\n}: FloatingActionPanelTextareaProps) {\n  const { note, setNote } = React.useContext(FloatingActionPanelContext)!;\n\n  return (\n    <textarea\n      id={id}\n      className={cn(\n        \"h-full w-full resize-none rounded-md bg-transparent px-4 py-3 text-sm outline-none\",\n        className\n      )}\n      autoFocus\n      value={note}\n      onChange={(e) => setNote(e.target.value)}\n    />\n  );\n}",
    "files": [
      {
        "path": "components/prismui/floating-action-panel.tsx",
        "type": "registry:ui"
      }
    ],
    "dependencies": [
      "framer-motion",
      "lucide-react"
    ],
    "category": "components",
    "subcategory": "overlay"
  },
  {
    "name": "hero-badge",
    "type": "registry:ui",
    "code": "\"use client\";\n\nimport { motion, useAnimation, type Variants } from \"framer-motion\";\nimport Link from \"next/link\";\nimport { cn } from \"@/lib/utils\";\n\nconst ease = [0.16, 1, 0.3, 1];\n\ninterface HeroBadgeProps {\n  href?: string;\n  text: string;\n  icon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n  variant?: \"default\" | \"outline\" | \"ghost\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n  onClick?: () => void;\n}\n\nconst badgeVariants: Record<string, string> = {\n  default: \"bg-background hover:bg-muted\",\n  outline: \"border-2 hover:bg-muted\",\n  ghost: \"hover:bg-muted/50\",\n};\n\nconst sizeVariants: Record<string, string> = {\n  sm: \"px-3 py-1 text-xs gap-1.5\",\n  md: \"px-4 py-1.5 text-sm gap-2\",\n  lg: \"px-5 py-2 text-base gap-2.5\",\n};\n\nconst iconAnimationVariants: Variants = {\n  initial: { rotate: 0 },\n  hover: { rotate: -10 },\n};\n\nexport default function HeroBadge({\n  href,\n  text,\n  icon,\n  endIcon,\n  variant = \"default\",\n  size = \"md\",\n  className,\n  onClick,\n}: HeroBadgeProps) {\n  const controls = useAnimation();\n\n  const BadgeWrapper = href ? Link : motion.button;\n  const wrapperProps = href ? { href } : { onClick };\n\n  const baseClassName = cn(\n    \"inline-flex items-center rounded-full border transition-colors\",\n    badgeVariants[variant],\n    sizeVariants[size],\n    className\n  );\n\n  return (\n    <BadgeWrapper\n      {...wrapperProps}\n      className={cn(\"group\", href && \"cursor-pointer\")}\n    >\n      <motion.div\n        className={baseClassName}\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8, ease }}\n        onHoverStart={() => controls.start(\"hover\")}\n        onHoverEnd={() => controls.start(\"initial\")}\n      >\n        {icon && (\n          <motion.div\n            className=\"text-foreground/60 transition-colors group-hover:text-primary\"\n            variants={iconAnimationVariants}\n            initial=\"initial\"\n            animate={controls}\n            transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n          >\n            {icon}\n          </motion.div>\n        )}\n        <span>{text}</span>\n        {endIcon && (\n          <motion.div className=\"text-foreground/60\">{endIcon}</motion.div>\n        )}\n      </motion.div>\n    </BadgeWrapper>\n  );\n}",
    "files": [
      {
        "path": "components/prismui/hero-badge.tsx",
        "type": "registry:ui"
      }
    ],
    "dependencies": [
      "framer-motion"
    ],
    "category": "components",
    "subcategory": "display"
  },
  {
    "name": "action-button",
    "type": "registry:ui",
    "code": "\"use client\";\n\nimport { LoaderCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { VariantProps } from \"class-variance-authority\";\nimport { Button } from \"../ui/button\";\nimport { buttonVariants } from \"../ui/button\";\n\ninterface props\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  children: React.ReactNode;\n  isPending: boolean;\n  onClick?: () => void;\n}\n\nexport default function ActionButton({\n  children,\n  isPending,\n  variant,\n  size,\n  className,\n  onClick,\n}: props) {\n  return (\n    <Button\n      onClick={\n        onClick\n          ? (e: React.MouseEvent<HTMLButtonElement>) => {\n              e.preventDefault();\n              onClick();\n            }\n          : undefined\n      }\n      type=\"submit\"\n      disabled={isPending}\n      variant={variant}\n      size={size}\n      className={cn(\n        className,\n        \"inline-grid place-items-center [grid-template-areas:'stack']\"\n      )}\n    >\n      <span\n        className={cn(\n          isPending && \"invisible\",\n          \"flex items-center gap-2 [grid-area:stack]\"\n        )}\n      >\n        {children}\n      </span>\n      <LoaderCircle\n        aria-label=\"Submitting\"\n        className={cn(\n          isPending ? \"visible\" : \"invisible\",\n          \"size-5 animate-spin transition-opacity [grid-area:stack]\"\n        )}\n      />\n    </Button>\n  );\n}",
    "files": [
      {
        "path": "components/prismui/action-button.tsx",
        "type": "registry:ui"
      }
    ],
    "dependencies": [
      "lucide-react",
      "class-variance-authority",
      "@/components/ui/button"
    ],
    "category": "components",
    "subcategory": "form"
  },
  {
    "name": "button-group",
    "type": "registry:ui",
    "code": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { cva, VariantProps } from \"class-variance-authority\";\nimport React from \"react\";\n\nconst buttonGroupVariants = cva(\n  \"flex sm:items-center max-sm:gap-1 max-sm:flex-col [&>*:focus-within]:ring-1 [&>*:focus-within]:z-10 [&>*]:ring-offset-0 sm:[&>*:not(:first-child)]:rounded-l-none sm:[&>*:not(:last-child)]:rounded-r-none\",\n  {\n    variants: {\n      size: {\n        default: \"[&>*]:h-10 [&>*]:px-4 [&>*]:py-2\",\n        sm: \"[&>*]:h-9 [&>*]:rounded-md [&>*]:px-3\",\n        lg: \"[&>*]:h-11 [&>*]:rounded-md [&>*]:px-8\",\n        icon: \"[&>*]:h-10 [&>*]:w-10\",\n      },\n      separated: {\n        true: \"[&>*]:outline [&>*]:outline-1 [&>*]:outline-zinc-500 gap-0.5 [&>*:focus-within]:ring-offset-2\",\n        false: \"[&>*:focus-within]:ring-offset-1\",\n      },\n    },\n    defaultVariants: {\n      separated: false,\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonGroupProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof buttonGroupVariants> {\n  separated?: boolean;\n}\n\nconst ButtonGroup = React.forwardRef<HTMLDivElement, ButtonGroupProps>(\n  ({ children, className, size, separated = false, ...props }, ref) => {\n    return (\n      <div\n        className={cn(buttonGroupVariants({ size, className, separated }))}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\nButtonGroup.displayName = \"ButtonGroup\";\n\nexport { ButtonGroup };",
    "files": [
      {
        "path": "components/prismui/button-group.tsx",
        "type": "registry:ui"
      }
    ],
    "dependencies": [
      "class-variance-authority"
    ],
    "category": "components",
    "subcategory": "form"
  },
  {
    "name": "expandable-card",
    "type": "registry:ui",
    "code": "\"use client\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Clock,\n  GitBranch,\n  Github,\n  MessageSquare,\n  StepForwardIcon as Progress,\n  Star,\n  Users,\n  CheckCircle2,\n} from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress as ProgressBar } from \"@/components/ui/progress\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { useExpandable } from \"@/hooks/use-expandable\";\n\ninterface ProjectStatusCardProps {\n  title: string;\n  progress: number;\n  dueDate: string;\n  contributors: Array<{ name: string; image?: string }>;\n  tasks: Array<{ title: string; completed: boolean }>;\n  githubStars: number;\n  openIssues: number;\n}\n\nexport function ProjectStatusCard({\n  title,\n  progress,\n  dueDate,\n  contributors,\n  tasks,\n  githubStars,\n  openIssues,\n}: ProjectStatusCardProps) {\n  const { isExpanded, toggleExpand, animatedHeight } = useExpandable();\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (contentRef.current) {\n      animatedHeight.set(isExpanded ? contentRef.current.scrollHeight : 0);\n    }\n  }, [isExpanded, animatedHeight]);\n\n  return (\n    <Card\n      className=\"w-full max-w-md cursor-pointer transition-all duration-300 hover:shadow-lg\"\n      onClick={toggleExpand}\n    >\n      <CardHeader className=\"space-y-1\">\n        <div className=\"flex justify-between items-start w-full\">\n          <div className=\"space-y-2\">\n            <Badge\n              variant=\"secondary\"\n              className={\n                progress === 100\n                  ? \"bg-green-100 text-green-600\"\n                  : \"bg-blue-100 text-blue-600\"\n              }\n            >\n              {progress === 100 ? \"Completed\" : \"In Progress\"}\n            </Badge>\n            <h3 className=\"text-2xl font-semibold\">{title}</h3>\n          </div>\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button size=\"icon\" variant=\"outline\" className=\"h-8 w-8\">\n                  <Github className=\"h-4 w-4\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>View on GitHub</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm text-gray-600\">\n              <span>Progress</span>\n              <span>{progress}%</span>\n            </div>\n            <ProgressBar value={progress} className=\"h-2\" />\n          </div>\n\n          <motion.div\n            style={{ height: animatedHeight }}\n            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n            className=\"overflow-hidden\"\n          >\n            <div ref={contentRef}>\n              <AnimatePresence>\n                {isExpanded && (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    className=\"space-y-4 pt-2\"\n                  >\n                    <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                      <div className=\"flex items-center\">\n                        <Clock className=\"h-4 w-4 mr-2\" />\n                        <span>Due {dueDate}</span>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"flex items-center\">\n                          <Star className=\"h-4 w-4 mr-1 text-yellow-400\" />\n                          <span>{githubStars}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <GitBranch className=\"h-4 w-4 mr-1\" />\n                          <span>{openIssues} issues</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm flex items-center\">\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        Contributors\n                      </h4>\n                      <div className=\"flex -space-x-2\">\n                        {contributors.map((contributor, index) => (\n                          <TooltipProvider key={index}>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Avatar className=\"border-2 border-white\">\n                                  <AvatarImage\n                                    src={\n                                      contributor.image ||\n                                      `/placeholder.svg?height=32&width=32&text=${contributor.name[0]}`\n                                    }\n                                    alt={contributor.name}\n                                  />\n                                  <AvatarFallback>\n                                    {contributor.name[0]}\n                                  </AvatarFallback>\n                                </Avatar>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>{contributor.name}</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm\">Recent Tasks</h4>\n                      {tasks.map((task, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center justify-between text-sm\"\n                        >\n                          <span className=\"text-gray-600\">{task.title}</span>\n                          {task.completed && (\n                            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                          )}\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Button className=\"w-full\">\n                        <MessageSquare className=\"h-4 w-4 mr-2\" />\n                        View Discussion\n                      </Button>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </motion.div>\n        </div>\n      </CardContent>\n\n      <CardFooter>\n        <div className=\"flex items-center justify-between w-full text-sm text-gray-600\">\n          <span>Last updated: 2 hours ago</span>\n          <span>{openIssues} open issues</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}",
    "files": [
      {
        "path": "components/prismui/expandable-card.tsx",
        "type": "registry:ui"
      }
    ],
    "dependencies": [
      "framer-motion",
      "lucide-react",
      "@/hooks/use-expandable"
    ],
    "category": "components",
    "subcategory": "display"
  }
]