[
  {
    "name": "action-button-template",
    "type": "registry:block",
    "title": "Action Button Template",
    "description": "A template for action-button-template",
    "files": [
      {
        "path": "action-button-template/app/component/action-button.tsx",
        "type": "registry:page",
        "target": "app/component/action-button.tsx",
        "content": "\"use client\";\n\nimport { LoaderCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { VariantProps } from \"class-variance-authority\";\nimport { Button } from \"@/components/ui/button\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\ninterface props\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  children: React.ReactNode;\n  isPending: boolean;\n  onClick?: () => void;\n}\n\nexport default function ActionButton({\n  children,\n  isPending,\n  variant,\n  size,\n  className,\n  onClick,\n}: props) {\n  return (\n    <Button\n      onClick={\n        onClick\n          ? (e: React.MouseEvent<HTMLButtonElement>) => {\n              e.preventDefault();\n              onClick();\n            }\n          : undefined\n      }\n      type=\"submit\"\n      disabled={isPending}\n      variant={variant}\n      size={size}\n      className={cn(\n        className,\n        \"inline-grid place-items-center [grid-template-areas:'stack']\"\n      )}\n    >\n      <span\n        className={cn(\n          isPending && \"invisible\",\n          \"flex items-center gap-2 [grid-area:stack]\"\n        )}\n      >\n        {children}\n      </span>\n      <LoaderCircle\n        aria-label=\"Submitting\"\n        className={cn(\n          isPending ? \"visible\" : \"invisible\",\n          \"size-5 animate-spin transition-opacity [grid-area:stack]\"\n        )}\n      />\n    </Button>\n  );\n}\n"
      },
      {
        "path": "action-button-template/app/globals.css",
        "type": "registry:page",
        "target": "app/globals.css",
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
      },
      {
        "path": "action-button-template/app/layout.tsx",
        "type": "registry:page",
        "target": "app/layout.tsx",
        "content": "import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"Action Button Template\",\n  description: \"A template showcasing the action button component\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          inter.className,\n          \"min-h-screen bg-background antialiased\"\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n"
      },
      {
        "path": "action-button-template/app/page.tsx",
        "type": "registry:page",
        "target": "app/page.tsx",
        "content": "\"use client\";\n\nimport ActionButton from \"./component/action-button\";\nimport { useState } from \"react\";\n\nexport default function ActionButtonPage() {\n  const [isPending, setIsPending] = useState(false);\n\n  const handleClick = () => {\n    setIsPending(true);\n    setTimeout(() => setIsPending(false), 2000); // Simulate loading\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex flex-col items-center justify-center p-4 gap-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Action Button</h1>\n        <p className=\"text-muted-foreground\">\n          A button component with loading state and animations.\n        </p>\n      </div>\n\n      <div className=\"flex flex-col items-center gap-4\">\n        <ActionButton\n          isPending={isPending}\n          onClick={handleClick}\n          variant=\"default\"\n          size=\"lg\"\n        >\n          Click me\n        </ActionButton>\n\n        <ActionButton\n          isPending={isPending}\n          onClick={handleClick}\n          variant=\"outline\"\n          size=\"default\"\n        >\n          Submit Form\n        </ActionButton>\n\n        <ActionButton\n          isPending={isPending}\n          onClick={handleClick}\n          variant=\"secondary\"\n          size=\"sm\"\n        >\n          Save Changes\n        </ActionButton>\n      </div>\n    </div>\n  );\n}"
      }
    ],
    "meta": {
      "author": "codehagen",
      "path": "/registry/action-button-template"
    }
  },
  {
    "name": "display-cards-template",
    "type": "registry:block",
    "title": "Display Cards Template",
    "description": "A template for display-cards-template",
    "files": [
      {
        "path": "display-cards-template/app/component/display-cards.tsx",
        "type": "registry:page",
        "target": "app/component/display-cards.tsx",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Sparkles } from \"lucide-react\";\n\ninterface DisplayCardProps {\n  className?: string;\n  icon?: React.ReactNode;\n  title?: string;\n  description?: string;\n  date?: string;\n  iconClassName?: string;\n  titleClassName?: string;\n}\n\nfunction DisplayCard({\n  className,\n  icon = <Sparkles className=\"size-4 text-blue-300\" />,\n  title = \"Featured\",\n  description = \"Discover amazing content\",\n  date = \"Just now\",\n  iconClassName = \"text-blue-500\",\n  titleClassName = \"text-blue-500\",\n}: DisplayCardProps) {\n  return (\n    <div\n      className={cn(\n        \"relative flex h-44 w-[26rem] -skew-y-[8deg] select-none flex-col justify-between rounded-xl border-2 bg-muted/70 backdrop-blur-sm px-6 py-4 transition-all duration-700 after:absolute after:-right-1 after:top-[-5%] after:h-[110%] after:w-[20rem] after:bg-gradient-to-l after:from-background after:to-transparent after:content-[''] hover:border-white/20 hover:bg-muted [&>*]:flex [&>*]:items-center [&>*]:gap-2\",\n        className\n      )}\n    >\n      <div>\n        <span className=\"relative inline-block rounded-full bg-blue-800 p-1.5\">\n          {icon}\n        </span>\n        <p className={cn(\"text-lg font-medium\", titleClassName)}>{title}</p>\n      </div>\n      <p className=\"whitespace-nowrap text-lg\">{description}</p>\n      <p className=\"text-muted-foreground\">{date}</p>\n    </div>\n  );\n}\n\ninterface DisplayCardsProps {\n  cards?: DisplayCardProps[];\n}\n\nexport default function DisplayCards({ cards }: DisplayCardsProps) {\n  const defaultCards = [\n    {\n      icon: <Sparkles className=\"size-4 text-blue-300\" />,\n      title: \"Featured\",\n      description: \"Discover amazing content\",\n      date: \"Just now\",\n      iconClassName: \"text-blue-500\",\n      titleClassName: \"text-blue-500\",\n      className:\n        \"[grid-area:stack] hover:-translate-y-10 before:absolute before:w-[100%] before:outline-1 before:rounded-xl before:outline-border before:h-[100%] before:content-[''] before:bg-blend-overlay before:bg-background/50 grayscale-[100%] hover:before:opacity-0 before:transition-opacity before:duration:700 hover:grayscale-0 before:left-0 before:top-0\",\n    },\n    {\n      icon: <Sparkles className=\"size-4 text-blue-300\" />,\n      title: \"Popular\",\n      description: \"Trending this week\",\n      date: \"2 days ago\",\n      iconClassName: \"text-blue-500\",\n      titleClassName: \"text-blue-500\",\n      className:\n        \"[grid-area:stack] translate-x-12 translate-y-10 hover:-translate-y-1 before:absolute before:w-[100%] before:outline-1 before:rounded-xl before:outline-border before:h-[100%] before:content-[''] before:bg-blend-overlay before:bg-background/50 grayscale-[100%] hover:before:opacity-0 before:transition-opacity before:duration:700 hover:grayscale-0 before:left-0 before:top-0\",\n    },\n    {\n      icon: <Sparkles className=\"size-4 text-blue-300\" />,\n      title: \"New\",\n      description: \"Latest updates and features\",\n      date: \"Today\",\n      iconClassName: \"text-blue-500\",\n      titleClassName: \"text-blue-500\",\n      className:\n        \"[grid-area:stack] translate-x-24 translate-y-20 hover:translate-y-10\",\n    },\n  ];\n\n  const displayCards = cards || defaultCards;\n\n  return (\n    <div className=\"grid [grid-template-areas:'stack'] place-items-center opacity-100 animate-in fade-in-0 duration-700 -ml-12\">\n      {displayCards.map((cardProps, index) => (\n        <DisplayCard key={index} {...cardProps} />\n      ))}\n    </div>\n  );\n}\n"
      },
      {
        "path": "display-cards-template/app/globals.css",
        "type": "registry:page",
        "target": "app/globals.css",
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
      },
      {
        "path": "display-cards-template/app/layout.tsx",
        "type": "registry:page",
        "target": "app/layout.tsx",
        "content": "import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"Display Cards Template\",\n  description: \"A template showcasing the display cards component\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          inter.className,\n          \"min-h-screen bg-background antialiased\"\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n"
      },
      {
        "path": "display-cards-template/app/page.tsx",
        "type": "registry:page",
        "target": "app/page.tsx",
        "content": "\"use client\";\n\nimport { Sparkles } from \"lucide-react\";\nimport DisplayCards from \"./component/display-cards\";\n\nexport default function DisplayCardsPage() {\n  return (\n    <div className=\"min-h-screen w-full flex flex-col items-center justify-center p-4 gap-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Display Cards</h1>\n        <p className=\"text-muted-foreground\">\n          A collection of animated display cards with hover effects.\n        </p>\n      </div>\n\n      <div className=\"w-full flex justify-center items-center pt-20\">\n        <DisplayCards\n          cards={[\n            {\n              icon: <Sparkles className=\"size-4 text-blue-300\" />,\n              title: \"Featured\",\n              description: \"Discover amazing content\",\n              date: \"Just now\",\n              iconClassName: \"text-blue-500\",\n              titleClassName: \"text-blue-500\",\n              className:\n                \"[grid-area:stack] hover:-translate-y-10 before:absolute before:w-[100%] before:outline-1 before:rounded-xl before:outline-border before:h-[100%] before:content-[''] before:bg-blend-overlay before:bg-background/50 grayscale-[100%] hover:before:opacity-0 before:transition-opacity before:duration:700 hover:grayscale-0 before:left-0 before:top-0\",\n            },\n            {\n              icon: <Sparkles className=\"size-4 text-blue-300\" />,\n              title: \"Popular\",\n              description: \"Trending this week\",\n              date: \"2 days ago\",\n              iconClassName: \"text-blue-500\",\n              titleClassName: \"text-blue-500\",\n              className:\n                \"[grid-area:stack] translate-x-12 translate-y-10 hover:-translate-y-1 before:absolute before:w-[100%] before:outline-1 before:rounded-xl before:outline-border before:h-[100%] before:content-[''] before:bg-blend-overlay before:bg-background/50 grayscale-[100%] hover:before:opacity-0 before:transition-opacity before:duration:700 hover:grayscale-0 before:left-0 before:top-0\",\n            },\n            {\n              icon: <Sparkles className=\"size-4 text-blue-300\" />,\n              title: \"New\",\n              description: \"Latest updates and features\",\n              date: \"Today\",\n              iconClassName: \"text-blue-500\",\n              titleClassName: \"text-blue-500\",\n              className:\n                \"[grid-area:stack] translate-x-24 translate-y-20 hover:translate-y-10\",\n            },\n          ]}\n        />\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    "meta": {
      "author": "codehagen",
      "path": "/registry/display-cards-template"
    }
  },
  {
    "name": "expandable-card-template",
    "type": "registry:block",
    "title": "Expandable Card Template",
    "description": "A template for expandable-card-template",
    "files": [
      {
        "path": "expandable-card-template/app/component/expandable-card.tsx",
        "type": "registry:page",
        "target": "app/component/expandable-card.tsx",
        "content": "\"use client\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Clock,\n  GitBranch,\n  Github,\n  MessageSquare,\n  StepForwardIcon as Progress,\n  Star,\n  Users,\n  CheckCircle2,\n} from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress as ProgressBar } from \"@/components/ui/progress\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { useExpandable } from \"../hooks/use-expandable\";\ninterface ProjectStatusCardProps {\n  title: string;\n  progress: number;\n  dueDate: string;\n  contributors: Array<{ name: string; image?: string }>;\n  tasks: Array<{ title: string; completed: boolean }>;\n  githubStars: number;\n  openIssues: number;\n}\n\nexport function ProjectStatusCard({\n  title,\n  progress,\n  dueDate,\n  contributors,\n  tasks,\n  githubStars,\n  openIssues,\n}: ProjectStatusCardProps) {\n  const { isExpanded, toggleExpand, animatedHeight } = useExpandable();\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (contentRef.current) {\n      animatedHeight.set(isExpanded ? contentRef.current.scrollHeight : 0);\n    }\n  }, [isExpanded, animatedHeight]);\n\n  return (\n    <Card\n      className=\"w-full max-w-md cursor-pointer transition-all duration-300 hover:shadow-lg\"\n      onClick={toggleExpand}\n    >\n      <CardHeader className=\"space-y-1\">\n        <div className=\"flex justify-between items-start w-full\">\n          <div className=\"space-y-2\">\n            <Badge\n              variant=\"secondary\"\n              className={\n                progress === 100\n                  ? \"bg-green-100 text-green-600\"\n                  : \"bg-blue-100 text-blue-600\"\n              }\n            >\n              {progress === 100 ? \"Completed\" : \"In Progress\"}\n            </Badge>\n            <h3 className=\"text-2xl font-semibold\">{title}</h3>\n          </div>\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button size=\"icon\" variant=\"outline\" className=\"h-8 w-8\">\n                  <Github className=\"h-4 w-4\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>View on GitHub</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm text-gray-600\">\n              <span>Progress</span>\n              <span>{progress}%</span>\n            </div>\n            <ProgressBar value={progress} className=\"h-2\" />\n          </div>\n\n          <motion.div\n            style={{ height: animatedHeight }}\n            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n            className=\"overflow-hidden\"\n          >\n            <div ref={contentRef}>\n              <AnimatePresence>\n                {isExpanded && (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    className=\"space-y-4 pt-2\"\n                  >\n                    <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                      <div className=\"flex items-center\">\n                        <Clock className=\"h-4 w-4 mr-2\" />\n                        <span>Due {dueDate}</span>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"flex items-center\">\n                          <Star className=\"h-4 w-4 mr-1 text-yellow-400\" />\n                          <span>{githubStars}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <GitBranch className=\"h-4 w-4 mr-1\" />\n                          <span>{openIssues} issues</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm flex items-center\">\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        Contributors\n                      </h4>\n                      <div className=\"flex -space-x-2\">\n                        {contributors.map((contributor, index) => (\n                          <TooltipProvider key={index}>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Avatar className=\"border-2 border-white\">\n                                  <AvatarImage\n                                    src={\n                                      contributor.image ||\n                                      `/placeholder.svg?height=32&width=32&text=${contributor.name[0]}`\n                                    }\n                                    alt={contributor.name}\n                                  />\n                                  <AvatarFallback>\n                                    {contributor.name[0]}\n                                  </AvatarFallback>\n                                </Avatar>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>{contributor.name}</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm\">Recent Tasks</h4>\n                      {tasks.map((task, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center justify-between text-sm\"\n                        >\n                          <span className=\"text-gray-600\">{task.title}</span>\n                          {task.completed && (\n                            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                          )}\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Button className=\"w-full\">\n                        <MessageSquare className=\"h-4 w-4 mr-2\" />\n                        View Discussion\n                      </Button>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </motion.div>\n        </div>\n      </CardContent>\n\n      <CardFooter>\n        <div className=\"flex items-center justify-between w-full text-sm text-gray-600\">\n          <span>Last updated: 2 hours ago</span>\n          <span>{openIssues} open issues</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n"
      },
      {
        "path": "expandable-card-template/app/globals.css",
        "type": "registry:page",
        "target": "app/globals.css",
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
      },
      {
        "path": "expandable-card-template/app/hooks/use-expandable.ts",
        "type": "registry:page",
        "target": "app/hooks/use-expandable.ts",
        "content": "import { useState, useCallback } from \"react\";\nimport { useSpring } from \"framer-motion\";\n\nexport function useExpandable(initialState = false) {\n  const [isExpanded, setIsExpanded] = useState(initialState);\n\n  const springConfig = { stiffness: 300, damping: 30 };\n  const animatedHeight = useSpring(0, springConfig);\n\n  const toggleExpand = useCallback(() => {\n    setIsExpanded((prev) => !prev);\n  }, []);\n\n  return { isExpanded, toggleExpand, animatedHeight };\n}\n"
      },
      {
        "path": "expandable-card-template/app/layout.tsx",
        "type": "registry:page",
        "target": "app/layout.tsx",
        "content": "import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"Expandable Card Template\",\n  description: \"A template showcasing the expandable card component\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          inter.className,\n          \"min-h-screen bg-background antialiased\"\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n"
      },
      {
        "path": "expandable-card-template/app/page.tsx",
        "type": "registry:page",
        "target": "app/page.tsx",
        "content": "\"use client\";\n\nimport { ProjectStatusCard } from \"./component/expandable-card\";\n\nexport default function ExpandableCardPage() {\n  return (\n    <div className=\"min-h-screen w-full flex flex-col items-center justify-center p-4 gap-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">\n          Project Status Card\n        </h1>\n        <p className=\"text-muted-foreground\">\n          An expandable card component for displaying project information.\n        </p>\n      </div>\n\n      <div className=\"w-full max-w-md\">\n        <ProjectStatusCard\n          title=\"Project 1\"\n          progress={50}\n          dueDate=\"2025-01-01\"\n          contributors={[\n            { name: \"John Doe\", image: \"/placeholder.svg\" },\n            { name: \"Jane Smith\", image: \"/placeholder.svg\" },\n          ]}\n          tasks={[\n            { title: \"Setup project structure\", completed: true },\n            { title: \"Implement core features\", completed: false },\n            { title: \"Write documentation\", completed: false },\n          ]}\n          githubStars={100}\n          openIssues={5}\n        />\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    "meta": {
      "author": "codehagen",
      "path": "/registry/expandable-card-template"
    }
  },
  {
    "name": "floating-action-panel-template",
    "type": "registry:block",
    "title": "Floating Action Panel Template",
    "description": "A template for floating-action-panel-template",
    "files": [
      {
        "path": "floating-action-panel-template/app/component/floating-action-panel.tsx",
        "type": "registry:page",
        "target": "app/component/floating-action-panel.tsx",
        "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { AnimatePresence, MotionConfig, motion } from \"framer-motion\";\nimport {\n  ArrowLeft,\n  Plus,\n  Upload,\n  Palette,\n  Share2,\n  BookMarked,\n  StickyNote,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst TRANSITION = {\n  type: \"spring\",\n  bounce: 0.1,\n  duration: 0.4,\n};\n\ninterface FloatingActionPanelContextType {\n  isOpen: boolean;\n  openPanel: (rect: DOMRect, mode: \"actions\" | \"note\") => void;\n  closePanel: () => void;\n  uniqueId: string;\n  triggerRect: DOMRect | null;\n  title: string;\n  setTitle: (title: string) => void;\n  note: string;\n  setNote: (note: string) => void;\n  mode: \"actions\" | \"note\";\n}\n\nconst FloatingActionPanelContext = React.createContext<\n  FloatingActionPanelContextType | undefined\n>(undefined);\n\nconst useFloatingActionPanel = () => {\n  const context = React.useContext(FloatingActionPanelContext);\n  if (!context) {\n    throw new Error(\n      \"useFloatingActionPanel must be used within a FloatingActionPanelProvider\"\n    );\n  }\n  return context;\n};\n\nfunction useFloatingActionPanelLogic() {\n  const uniqueId = React.useId();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [triggerRect, setTriggerRect] = React.useState<DOMRect | null>(null);\n  const [title, setTitle] = React.useState(\"\");\n  const [note, setNote] = React.useState(\"\");\n  const [mode, setMode] = React.useState<\"actions\" | \"note\">(\"actions\");\n\n  const openPanel = (rect: DOMRect, newMode: \"actions\" | \"note\") => {\n    setTriggerRect(rect);\n    setMode(newMode);\n    setIsOpen(true);\n  };\n  const closePanel = () => {\n    setIsOpen(false);\n    setNote(\"\");\n  };\n\n  return {\n    isOpen,\n    openPanel,\n    closePanel,\n    uniqueId,\n    triggerRect,\n    title,\n    setTitle,\n    note,\n    setNote,\n    mode,\n  };\n}\n\ninterface FloatingActionPanelRootProps {\n  children: (context: FloatingActionPanelContextType) => React.ReactNode;\n  className?: string;\n}\n\nconst FloatingActionPanelRoot = React.forwardRef<\n  HTMLDivElement,\n  FloatingActionPanelRootProps\n>(({ children, className }, ref) => {\n  const floatingPanelLogic = useFloatingActionPanelLogic();\n\n  return (\n    <FloatingActionPanelContext.Provider value={floatingPanelLogic}>\n      <MotionConfig transition={TRANSITION}>\n        <div ref={ref} className={cn(\"relative\", className)}>\n          {children(floatingPanelLogic)}\n        </div>\n      </MotionConfig>\n    </FloatingActionPanelContext.Provider>\n  );\n});\nFloatingActionPanelRoot.displayName = \"FloatingActionPanelRoot\";\n\ninterface FloatingActionPanelTriggerProps {\n  children: React.ReactNode;\n  className?: string;\n  title: string;\n  mode: \"actions\" | \"note\";\n}\n\nconst FloatingActionPanelTrigger = React.forwardRef<\n  HTMLButtonElement,\n  FloatingActionPanelTriggerProps\n>(({ children, className, title, mode }, ref) => {\n  const { openPanel, uniqueId, setTitle } = useFloatingActionPanel();\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n\n  const handleClick = () => {\n    if (triggerRef.current) {\n      openPanel(triggerRef.current.getBoundingClientRect(), mode);\n      setTitle(title);\n    }\n  };\n\n  return (\n    <motion.button\n      ref={triggerRef}\n      layoutId={`floating-panel-trigger-${uniqueId}-${mode}`}\n      className={cn(\n        \"flex h-9 items-center rounded-md border border-zinc-200 bg-white px-3 text-sm font-medium text-zinc-900 shadow-sm hover:bg-zinc-50 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50 dark:hover:bg-zinc-800\",\n        className\n      )}\n      onClick={handleClick}\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n    >\n      {children}\n    </motion.button>\n  );\n});\nFloatingActionPanelTrigger.displayName = \"FloatingActionPanelTrigger\";\n\ninterface FloatingActionPanelContentProps {\n  children?: React.ReactNode;\n  className?: string;\n}\n\nconst FloatingActionPanelContent = React.forwardRef<\n  HTMLDivElement,\n  FloatingActionPanelContentProps\n>(({ children, className }, ref) => {\n  const { isOpen, closePanel, uniqueId, triggerRect, title, mode } =\n    useFloatingActionPanel();\n  const contentRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        contentRef.current &&\n        !contentRef.current.contains(event.target as Node)\n      ) {\n        closePanel();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [closePanel]);\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") closePanel();\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [closePanel]);\n\n  const getPosition = () => {\n    if (!triggerRect) return { left: \"50%\", top: \"50%\" };\n\n    // Get scroll position\n    const scrollX = window.scrollX || window.pageXOffset;\n    const scrollY = window.scrollY || window.pageYOffset;\n\n    // Calculate position\n    const left = triggerRect.left + scrollX;\n    const top = triggerRect.bottom + scrollY + 8; // 8px gap\n\n    return {\n      position: \"absolute\" as const,\n      left: 0,\n      top: 0,\n      transform: `translate3d(${left}px, ${top}px, 0)`,\n    };\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <div className=\"relative\">\n          <motion.div\n            initial={{ backdropFilter: \"blur(0px)\" }}\n            animate={{ backdropFilter: \"blur(4px)\" }}\n            exit={{ backdropFilter: \"blur(0px)\" }}\n            className=\"fixed inset-0 z-40 bg-black/5\"\n          />\n          <motion.div\n            ref={contentRef}\n            layoutId={`floating-panel-${uniqueId}-${mode}`}\n            className={cn(\n              \"absolute z-50 min-w-[200px] overflow-hidden rounded-lg border border-zinc-200 bg-white shadow-lg outline-none dark:border-zinc-800 dark:bg-zinc-950\",\n              className\n            )}\n            style={getPosition()}\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n          >\n            <div className=\"px-4 py-3 font-medium\">{title}</div>\n            {children}\n          </motion.div>\n        </div>\n      )}\n    </AnimatePresence>\n  );\n});\nFloatingActionPanelContent.displayName = \"FloatingActionPanelContent\";\n\ninterface FloatingActionPanelButtonProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n  className?: string;\n}\n\nconst FloatingActionPanelButton = React.forwardRef<\n  HTMLButtonElement,\n  FloatingActionPanelButtonProps\n>(({ children, onClick, className }, ref) => {\n  return (\n    <motion.button\n      ref={ref}\n      className={cn(\n        \"flex w-full items-center gap-2 rounded-md px-2 py-1.5 text-sm text-zinc-900 hover:bg-zinc-100 dark:text-zinc-50 dark:hover:bg-zinc-800\",\n        className\n      )}\n      onClick={onClick}\n      whileTap={{ scale: 0.98 }}\n    >\n      {children}\n    </motion.button>\n  );\n});\nFloatingActionPanelButton.displayName = \"FloatingActionPanelButton\";\n\ninterface FloatingActionPanelFormProps {\n  children: React.ReactNode;\n  onSubmit?: (note: string) => void;\n  className?: string;\n}\n\nconst FloatingActionPanelForm = React.forwardRef<\n  HTMLFormElement,\n  FloatingActionPanelFormProps\n>(({ children, onSubmit, className }, ref) => {\n  const { note, closePanel } = useFloatingActionPanel();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit?.(note);\n    closePanel();\n  };\n\n  return (\n    <form\n      ref={ref}\n      className={cn(\"flex h-full flex-col\", className)}\n      onSubmit={handleSubmit}\n    >\n      {children}\n    </form>\n  );\n});\nFloatingActionPanelForm.displayName = \"FloatingActionPanelForm\";\n\ninterface FloatingActionPanelTextareaProps {\n  className?: string;\n  id?: string;\n}\n\nconst FloatingActionPanelTextarea = React.forwardRef<\n  HTMLTextAreaElement,\n  FloatingActionPanelTextareaProps\n>(({ className, id }, ref) => {\n  const { note, setNote } = useFloatingActionPanel();\n\n  return (\n    <textarea\n      ref={ref}\n      id={id}\n      className={cn(\n        \"h-full w-full resize-none rounded-md bg-transparent px-4 py-3 text-sm outline-none\",\n        className\n      )}\n      autoFocus\n      value={note}\n      onChange={(e) => setNote(e.target.value)}\n    />\n  );\n});\nFloatingActionPanelTextarea.displayName = \"FloatingActionPanelTextarea\";\n\nexport {\n  FloatingActionPanelRoot,\n  FloatingActionPanelTrigger,\n  FloatingActionPanelContent,\n  FloatingActionPanelButton,\n  FloatingActionPanelForm,\n  FloatingActionPanelTextarea,\n  FloatingActionPanelContext,\n};\n"
      },
      {
        "path": "floating-action-panel-template/app/globals.css",
        "type": "registry:page",
        "target": "app/globals.css",
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
      },
      {
        "path": "floating-action-panel-template/app/layout.tsx",
        "type": "registry:page",
        "target": "app/layout.tsx",
        "content": "import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"Floating Action Panel Template\",\n  description: \"A template showcasing the floating action panel component\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          inter.className,\n          \"min-h-screen bg-background antialiased\"\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n"
      },
      {
        "path": "floating-action-panel-template/app/page.tsx",
        "type": "registry:page",
        "target": "app/page.tsx",
        "content": "\"use client\";\n\nimport {\n  FloatingActionPanelRoot,\n  FloatingActionPanelTrigger,\n  FloatingActionPanelContent,\n  FloatingActionPanelButton,\n} from \"./component/floating-action-panel\";\nimport { Plus, Upload, Palette, Share2, BookMarked } from \"lucide-react\";\n\nexport default function FloatingActionPanelPage() {\n  return (\n    <div className=\"min-h-screen w-full flex flex-col items-center justify-center p-4 gap-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">\n          Floating Action Panel\n        </h1>\n        <p className=\"text-muted-foreground\">\n          A floating panel component for contextual actions and menus.\n        </p>\n      </div>\n\n      <div className=\"w-full max-w-md flex justify-center\">\n        <FloatingActionPanelRoot>\n          {() => (\n            <>\n              <FloatingActionPanelTrigger title=\"Actions\" mode=\"actions\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                <span>Actions</span>\n              </FloatingActionPanelTrigger>\n\n              <FloatingActionPanelContent className=\"w-[200px] p-2\">\n                <FloatingActionPanelButton>\n                  <Upload className=\"h-4 w-4\" />\n                  <span>Upload</span>\n                </FloatingActionPanelButton>\n                <FloatingActionPanelButton>\n                  <Palette className=\"h-4 w-4\" />\n                  <span>Theme</span>\n                </FloatingActionPanelButton>\n                <FloatingActionPanelButton>\n                  <Share2 className=\"h-4 w-4\" />\n                  <span>Share</span>\n                </FloatingActionPanelButton>\n                <FloatingActionPanelButton>\n                  <BookMarked className=\"h-4 w-4\" />\n                  <span>Bookmark</span>\n                </FloatingActionPanelButton>\n              </FloatingActionPanelContent>\n            </>\n          )}\n        </FloatingActionPanelRoot>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    "meta": {
      "author": "codehagen",
      "path": "/registry/floating-action-panel-template"
    }
  },
  {
    "name": "hero-badge-template",
    "type": "registry:block",
    "title": "Hero Badge Template",
    "description": "A template for hero-badge-template",
    "files": [
      {
        "path": "hero-badge-template/app/component/hero-badge.tsx",
        "type": "registry:page",
        "target": "app/component/hero-badge.tsx",
        "content": "\"use client\";\n\nimport { motion, useAnimation, type Variants } from \"framer-motion\";\nimport Link from \"next/link\";\nimport { cn } from \"@/lib/utils\";\n\nconst ease = [0.16, 1, 0.3, 1];\n\ninterface HeroBadgeProps {\n  href?: string;\n  text: string;\n  icon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n  variant?: \"default\" | \"outline\" | \"ghost\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n  onClick?: () => void;\n}\n\nconst badgeVariants: Record<string, string> = {\n  default: \"bg-background hover:bg-muted\",\n  outline: \"border-2 hover:bg-muted\",\n  ghost: \"hover:bg-muted/50\",\n};\n\nconst sizeVariants: Record<string, string> = {\n  sm: \"px-3 py-1 text-xs gap-1.5\",\n  md: \"px-4 py-1.5 text-sm gap-2\",\n  lg: \"px-5 py-2 text-base gap-2.5\",\n};\n\nconst iconAnimationVariants: Variants = {\n  initial: { rotate: 0 },\n  hover: { rotate: -10 },\n};\n\nexport default function HeroBadge({\n  href,\n  text,\n  icon,\n  endIcon,\n  variant = \"default\",\n  size = \"md\",\n  className,\n  onClick,\n}: HeroBadgeProps) {\n  const controls = useAnimation();\n\n  const BadgeWrapper = href ? Link : motion.button;\n  const wrapperProps = href ? { href } : { onClick };\n\n  const baseClassName = cn(\n    \"inline-flex items-center rounded-full border transition-colors\",\n    badgeVariants[variant],\n    sizeVariants[size],\n    className\n  );\n\n  return (\n    <BadgeWrapper\n      {...wrapperProps}\n      className={cn(\"group\", href && \"cursor-pointer\")}\n    >\n      <motion.div\n        className={baseClassName}\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8, ease }}\n        onHoverStart={() => controls.start(\"hover\")}\n        onHoverEnd={() => controls.start(\"initial\")}\n      >\n        {icon && (\n          <motion.div\n            className=\"text-foreground/60 transition-colors group-hover:text-primary\"\n            variants={iconAnimationVariants}\n            initial=\"initial\"\n            animate={controls}\n            transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n          >\n            {icon}\n          </motion.div>\n        )}\n        <span>{text}</span>\n        {endIcon && (\n          <motion.div className=\"text-foreground/60\">{endIcon}</motion.div>\n        )}\n      </motion.div>\n    </BadgeWrapper>\n  );\n}\n"
      },
      {
        "path": "hero-badge-template/app/globals.css",
        "type": "registry:page",
        "target": "app/globals.css",
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
      },
      {
        "path": "hero-badge-template/app/layout.tsx",
        "type": "registry:page",
        "target": "app/layout.tsx",
        "content": "import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"Hero Badge Template\",\n  description: \"A template showcasing the hero badge component\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          inter.className,\n          \"min-h-screen bg-background antialiased\"\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n"
      },
      {
        "path": "hero-badge-template/app/page.tsx",
        "type": "registry:page",
        "target": "app/page.tsx",
        "content": "\"use client\";\n\nimport { Github, ArrowRight } from \"lucide-react\";\nimport HeroBadge from \"./component/hero-badge\";\n\nexport default function HeroBadgePage() {\n  return (\n    <div className=\"min-h-screen w-full flex flex-col items-center justify-center p-4 gap-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Hero Badge</h1>\n        <p className=\"text-muted-foreground\">\n          A beautiful animated badge component for hero sections.\n        </p>\n      </div>\n\n      <div className=\"flex flex-col items-center gap-4\">\n        <HeroBadge\n          href=\"#\"\n          text=\"Star on GitHub\"\n          icon={<Github className=\"h-4 w-4\" />}\n          variant=\"default\"\n          size=\"md\"\n        />\n\n        <HeroBadge\n          href=\"#\"\n          text=\"Get Started\"\n          endIcon={<ArrowRight className=\"h-4 w-4\" />}\n          variant=\"outline\"\n          size=\"lg\"\n        />\n\n        <HeroBadge text=\"New Release\" variant=\"ghost\" size=\"sm\" />\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    "meta": {
      "author": "codehagen",
      "path": "/registry/hero-badge-template"
    }
  },
  {
    "name": "hero-template",
    "type": "registry:block",
    "title": "Hero Template",
    "description": "A template for hero-template",
    "files": [
      {
        "path": "hero-template/app/component/expandable-card.tsx",
        "type": "registry:page",
        "target": "app/component/expandable-card.tsx",
        "content": "\"use client\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport { useState, useCallback } from \"react\";\nimport { useSpring } from \"framer-motion\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Clock,\n  GitBranch,\n  Github,\n  MessageSquare,\n  StepForwardIcon as Progress,\n  Star,\n  Users,\n  CheckCircle2,\n} from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress as ProgressBar } from \"@/components/ui/progress\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\ninterface ProjectStatusCardProps {\n  title: string;\n  progress: number;\n  dueDate: string;\n  contributors: Array<{ name: string; image?: string }>;\n  tasks: Array<{ title: string; completed: boolean }>;\n  githubStars: number;\n  openIssues: number;\n}\n\nexport function useExpandable(initialState = false) {\n  const [isExpanded, setIsExpanded] = useState(initialState);\n\n  const springConfig = { stiffness: 300, damping: 30 };\n  const animatedHeight = useSpring(0, springConfig);\n\n  const toggleExpand = useCallback(() => {\n    setIsExpanded((prev) => !prev);\n  }, []);\n\n  return { isExpanded, toggleExpand, animatedHeight };\n}\n\nexport function ProjectStatusCard({\n  title,\n  progress,\n  dueDate,\n  contributors,\n  tasks,\n  githubStars,\n  openIssues,\n}: ProjectStatusCardProps) {\n  const { isExpanded, toggleExpand, animatedHeight } = useExpandable();\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (contentRef.current) {\n      animatedHeight.set(isExpanded ? contentRef.current.scrollHeight : 0);\n    }\n  }, [isExpanded, animatedHeight]);\n\n  return (\n    <Card\n      className=\"w-full max-w-md cursor-pointer transition-all duration-300 hover:shadow-lg\"\n      onClick={toggleExpand}\n    >\n      <CardHeader className=\"space-y-1\">\n        <div className=\"flex justify-between items-start w-full\">\n          <div className=\"space-y-2\">\n            <Badge\n              variant=\"secondary\"\n              className={\n                progress === 100\n                  ? \"bg-green-100 text-green-600\"\n                  : \"bg-blue-100 text-blue-600\"\n              }\n            >\n              {progress === 100 ? \"Completed\" : \"In Progress\"}\n            </Badge>\n            <h3 className=\"text-2xl font-semibold\">{title}</h3>\n          </div>\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button size=\"icon\" variant=\"outline\" className=\"h-8 w-8\">\n                  <Github className=\"h-4 w-4\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>View on GitHub</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm text-gray-600\">\n              <span>Progress</span>\n              <span>{progress}%</span>\n            </div>\n            <ProgressBar value={progress} className=\"h-2\" />\n          </div>\n\n          <motion.div\n            style={{ height: animatedHeight }}\n            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n            className=\"overflow-hidden\"\n          >\n            <div ref={contentRef}>\n              <AnimatePresence>\n                {isExpanded && (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    className=\"space-y-4 pt-2\"\n                  >\n                    <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                      <div className=\"flex items-center\">\n                        <Clock className=\"h-4 w-4 mr-2\" />\n                        <span>Due {dueDate}</span>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"flex items-center\">\n                          <Star className=\"h-4 w-4 mr-1 text-yellow-400\" />\n                          <span>{githubStars}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <GitBranch className=\"h-4 w-4 mr-1\" />\n                          <span>{openIssues} issues</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm flex items-center\">\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        Contributors\n                      </h4>\n                      <div className=\"flex -space-x-2\">\n                        {contributors.map((contributor, index) => (\n                          <TooltipProvider key={index}>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Avatar className=\"border-2 border-white\">\n                                  <AvatarImage\n                                    src={\n                                      contributor.image ||\n                                      `/placeholder.svg?height=32&width=32&text=${contributor.name[0]}`\n                                    }\n                                    alt={contributor.name}\n                                  />\n                                  <AvatarFallback>\n                                    {contributor.name[0]}\n                                  </AvatarFallback>\n                                </Avatar>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>{contributor.name}</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm\">Recent Tasks</h4>\n                      {tasks.map((task, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center justify-between text-sm\"\n                        >\n                          <span className=\"text-gray-600\">{task.title}</span>\n                          {task.completed && (\n                            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                          )}\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Button className=\"w-full\">\n                        <MessageSquare className=\"h-4 w-4 mr-2\" />\n                        View Discussion\n                      </Button>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </motion.div>\n        </div>\n      </CardContent>\n\n      <CardFooter>\n        <div className=\"flex items-center justify-between w-full text-sm text-gray-600\">\n          <span>Last updated: 2 hours ago</span>\n          <span>{openIssues} open issues</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n"
      },
      {
        "path": "hero-template/app/component/hero.tsx",
        "type": "registry:page",
        "target": "app/component/hero.tsx",
        "content": "\"use client\";\n\nimport { motion, useAnimation } from \"framer-motion\";\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport Link from \"next/link\";\nimport { ChevronRight, Pyramid } from \"lucide-react\";\n\nconst ease = [0.16, 1, 0.3, 1];\n\ninterface HeroPillProps {\n  href?: string;\n  text: string;\n  icon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n}\n\nfunction HeroPill({ href, text, icon, endIcon }: HeroPillProps) {\n  const controls = useAnimation();\n\n  return (\n    <Link href={href || \"/docs\"} className=\"group\">\n      <motion.div\n        className=\"inline-flex items-center gap-2 rounded-full border bg-background px-4 py-1.5 text-sm transition-colors hover:bg-muted\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8, ease }}\n        onHoverStart={() => controls.start({ rotate: -10 })}\n        onHoverEnd={() => controls.start({ rotate: 0 })}\n      >\n        <motion.div\n          className=\"text-foreground/60 transition-colors group-hover:text-primary\"\n          animate={controls}\n          transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n        >\n          {icon || <Pyramid className=\"h-4 w-4\" />}\n        </motion.div>\n        <span>{text}</span>\n        {endIcon || <ChevronRight className=\"h-4 w-4\" />}\n      </motion.div>\n    </Link>\n  );\n}\n\ninterface HeroContentProps {\n  title: string;\n  titleHighlight?: string;\n  description: string;\n  primaryAction?: {\n    href: string;\n    text: string;\n    icon?: React.ReactNode;\n  };\n  secondaryAction?: {\n    href: string;\n    text: string;\n    icon?: React.ReactNode;\n  };\n}\n\nfunction HeroContent({\n  title,\n  titleHighlight,\n  description,\n  primaryAction,\n  secondaryAction,\n}: HeroContentProps) {\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <motion.h1\n        className=\"text-4xl font-bold tracking-tight sm:text-6xl lg:text-7xl xl:text-8xl\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8, ease }}\n      >\n        {title}{\" \"}\n        {titleHighlight && (\n          <span className=\"text-primary\">{titleHighlight}</span>\n        )}\n      </motion.h1>\n      <motion.p\n        className=\"max-w-[42rem] leading-normal text-muted-foreground sm:text-xl sm:leading-8\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.1, duration: 0.8, ease }}\n      >\n        {description}\n      </motion.p>\n      <motion.div\n        className=\"flex flex-col sm:flex-row gap-4 pt-4\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.2, duration: 0.8, ease }}\n      >\n        {primaryAction && (\n          <Link\n            href={primaryAction.href}\n            className={cn(\n              buttonVariants({ size: \"lg\" }),\n              \"gap-2 w-full sm:w-auto justify-center\"\n            )}\n          >\n            {primaryAction.icon}\n            {primaryAction.text}\n          </Link>\n        )}\n        {secondaryAction && (\n          <Link\n            href={secondaryAction.href}\n            className={cn(\n              buttonVariants({ variant: \"outline\", size: \"lg\" }),\n              \"gap-2 w-full sm:w-auto justify-center\"\n            )}\n          >\n            {secondaryAction.icon}\n            {secondaryAction.text}\n          </Link>\n        )}\n      </motion.div>\n    </div>\n  );\n}\n\ninterface HeroProps {\n  pill?: {\n    href?: string;\n    text: string;\n    icon?: React.ReactNode;\n    endIcon?: React.ReactNode;\n  };\n  content: HeroContentProps;\n  preview?: React.ReactNode;\n}\n\nexport default function Hero({ pill, content, preview }: HeroProps) {\n  return (\n    <div className=\"container relative overflow-hidden\">\n      <div className=\"flex min-h-[calc(100vh-64px)] flex-col lg:flex-row items-center py-8 px-4 md:px-8 lg:px-12\">\n        <div className=\"flex flex-col gap-4 w-full lg:max-w-2xl\">\n          {pill && <HeroPill {...pill} />}\n          <HeroContent {...content} />\n        </div>\n        {preview && (\n          <div className=\"w-full lg:max-w-xl lg:pl-16 mt-12 lg:mt-0\">\n            {preview}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"
      },
      {
        "path": "hero-template/app/globals.css",
        "type": "registry:page",
        "target": "app/globals.css",
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
      },
      {
        "path": "hero-template/app/layout.tsx",
        "type": "registry:page",
        "target": "app/layout.tsx",
        "content": "import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"Hero Template\",\n  description: \"A template showcasing the hero component\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          inter.className,\n          \"min-h-screen bg-background antialiased\"\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n"
      },
      {
        "path": "hero-template/app/page.tsx",
        "type": "registry:page",
        "target": "app/page.tsx",
        "content": "\"use client\";\n\nimport { ArrowRight, ChevronRight, Component } from \"lucide-react\";\nimport Hero from \"./component/hero\";\nimport { ProjectStatusCard } from \"./component/expandable-card\";\n\nexport default function HeroPage() {\n  return (\n    <div className=\"min-h-screen w-full\">\n      <Hero\n        pill={{\n          text: \"✨ New Components\",\n          href: \"/docs\",\n          endIcon: <ChevronRight className=\"h-4 w-4\" />,\n        }}\n        content={{\n          title: \"Beautiful UI\",\n          titleHighlight: \"Components\",\n          description:\n            \"A collection of beautiful and accessible UI components built with Tailwind CSS and Radix UI.\",\n          primaryAction: {\n            href: \"/docs\",\n            text: \"Get Started\",\n            icon: <ArrowRight className=\"h-4 w-4\" />,\n          },\n          secondaryAction: {\n            href: \"/docs/components\",\n            text: \"Components\",\n            icon: <Component className=\"h-4 w-4\" />,\n          },\n        }}\n        preview={\n          <ProjectStatusCard\n            title=\"Project Status\"\n            progress={75}\n            dueDate=\"2024-12-31\"\n            contributors={[\n              { name: \"John Doe\", image: \"/placeholder.svg\" },\n              { name: \"Jane Smith\", image: \"/placeholder.svg\" },\n              { name: \"Alex Johnson\", image: \"/placeholder.svg\" },\n            ]}\n            tasks={[\n              { title: \"Design System\", completed: true },\n              { title: \"Component Library\", completed: true },\n              { title: \"Documentation\", completed: false },\n            ]}\n            githubStars={1234}\n            openIssues={5}\n          />\n        }\n      />\n    </div>\n  );\n}\n"
      }
    ],
    "meta": {
      "author": "codehagen",
      "path": "/registry/hero-template"
    }
  },
  {
    "name": "landing-page-test",
    "type": "registry:block",
    "title": "Landing Page Test",
    "description": "A template for landing-page-test",
    "files": [
      {
        "path": "landing-page-test/app/globals.css",
        "type": "registry:page",
        "target": "app/globals.css",
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
      },
      {
        "path": "landing-page-test/app/layout.tsx",
        "type": "registry:page",
        "target": "app/layout.tsx",
        "content": "import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"Expandable Card Template\",\n  description: \"A template showcasing the expandable card component\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          inter.className,\n          \"min-h-screen bg-background antialiased\"\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n"
      },
      {
        "path": "landing-page-test/app/page.tsx",
        "type": "registry:page",
        "target": "app/page.tsx",
        "content": "\"use client\";\n\nexport default function ExpandableCardPage() {\n  return (\n    <div className=\"container mx-auto py-10\">\n      <div className=\"max-w-2xl mx-auto space-y-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Project Status Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            THIS IS A TEST FOR LANDING PAGE\n          </p>\n        </div>\n\n        <div className=\"mt-8 text-center text-sm text-muted-foreground\">\n          <p>Click the card to expand and see more details</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    "meta": {
      "author": "codehagen",
      "path": "/registry/landing-page-test"
    }
  },
  {
    "name": "popover-template",
    "type": "registry:block",
    "title": "Popover Template",
    "description": "A template for popover-template",
    "files": [
      {
        "path": "popover-template/app/component/popover.tsx",
        "type": "registry:page",
        "target": "app/component/popover.tsx",
        "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { AnimatePresence, MotionConfig, motion } from \"framer-motion\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\nconst TRANSITION = {\n  type: \"spring\",\n  bounce: 0.05,\n  duration: 0.3,\n};\n\ninterface PopoverContextType {\n  isOpen: boolean;\n  openPopover: () => void;\n  closePopover: () => void;\n  uniqueId: string;\n  note: string;\n  setNote: (note: string) => void;\n}\n\nconst PopoverContext = React.createContext<PopoverContextType | undefined>(\n  undefined\n);\n\nfunction usePopover() {\n  const context = React.useContext(PopoverContext);\n  if (!context) {\n    throw new Error(\"usePopover must be used within a PopoverProvider\");\n  }\n  return context;\n}\n\nfunction usePopoverLogic() {\n  const uniqueId = React.useId();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [note, setNote] = React.useState(\"\");\n\n  const openPopover = () => setIsOpen(true);\n  const closePopover = () => {\n    setIsOpen(false);\n    setNote(\"\");\n  };\n\n  return { isOpen, openPopover, closePopover, uniqueId, note, setNote };\n}\n\ninterface PopoverRootProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst PopoverRoot = React.forwardRef<HTMLDivElement, PopoverRootProps>(\n  ({ children, className }, ref) => {\n    const popoverLogic = usePopoverLogic();\n\n    return (\n      <PopoverContext.Provider value={popoverLogic}>\n        <MotionConfig transition={TRANSITION}>\n          <div\n            ref={ref}\n            className={cn(\n              \"relative flex items-center justify-center isolate\",\n              className\n            )}\n          >\n            {children}\n          </div>\n        </MotionConfig>\n      </PopoverContext.Provider>\n    );\n  }\n);\nPopoverRoot.displayName = \"PopoverRoot\";\n\ninterface PopoverTriggerProps {\n  children: React.ReactNode;\n  className?: string;\n  variant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\";\n}\n\nconst PopoverTrigger = React.forwardRef<HTMLButtonElement, PopoverTriggerProps>(\n  ({ children, className, variant = \"outline\" }, ref) => {\n    const { openPopover, uniqueId } = usePopover();\n\n    return (\n      <motion.div key=\"button\" layoutId={`popover-${uniqueId}`}>\n        <Button\n          ref={ref}\n          variant={variant}\n          className={className}\n          onClick={openPopover}\n        >\n          <motion.span\n            layoutId={`popover-label-${uniqueId}`}\n            className=\"text-sm\"\n          >\n            {children}\n          </motion.span>\n        </Button>\n      </motion.div>\n    );\n  }\n);\nPopoverTrigger.displayName = \"PopoverTrigger\";\n\ninterface PopoverContentProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst PopoverContent = React.forwardRef<HTMLDivElement, PopoverContentProps>(\n  ({ children, className }, ref) => {\n    const { isOpen, closePopover, uniqueId } = usePopover();\n    const contentRef = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n      const handleClickOutside = (event: MouseEvent) => {\n        if (\n          contentRef.current &&\n          !contentRef.current.contains(event.target as Node)\n        ) {\n          closePopover();\n        }\n      };\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () =>\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [closePopover]);\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === \"Escape\") closePopover();\n      };\n      document.addEventListener(\"keydown\", handleKeyDown);\n      return () => document.removeEventListener(\"keydown\", handleKeyDown);\n    }, [closePopover]);\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            ref={contentRef}\n            layoutId={`popover-${uniqueId}`}\n            className={cn(\n              \"absolute z-50 min-w-[200px] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md outline-none\",\n              className\n            )}\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n          >\n            {children}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    );\n  }\n);\nPopoverContent.displayName = \"PopoverContent\";\n\ninterface PopoverHeaderProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst PopoverHeader = React.forwardRef<HTMLDivElement, PopoverHeaderProps>(\n  ({ children, className }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"border-b px-4 py-2.5 font-medium text-foreground/90\",\n          className\n        )}\n      >\n        {children}\n      </div>\n    );\n  }\n);\nPopoverHeader.displayName = \"PopoverHeader\";\n\ninterface PopoverBodyProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst PopoverBody = React.forwardRef<HTMLDivElement, PopoverBodyProps>(\n  ({ children, className }, ref) => {\n    return (\n      <div ref={ref} className={cn(\"p-4\", className)}>\n        {children}\n      </div>\n    );\n  }\n);\nPopoverBody.displayName = \"PopoverBody\";\n\ninterface PopoverButtonProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n  className?: string;\n}\n\nconst PopoverButton = React.forwardRef<HTMLButtonElement, PopoverButtonProps>(\n  ({ children, onClick, className }, ref) => {\n    return (\n      <Button\n        ref={ref}\n        variant=\"ghost\"\n        className={cn(\n          \"w-full justify-start gap-2 px-4 py-2 font-normal\",\n          className\n        )}\n        onClick={onClick}\n      >\n        {children}\n      </Button>\n    );\n  }\n);\nPopoverButton.displayName = \"PopoverButton\";\n\ninterface PopoverFooterProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst PopoverFooter = React.forwardRef<HTMLDivElement, PopoverFooterProps>(\n  ({ children, className }, ref) => {\n    return (\n      <div\n        ref={ref}\n        key=\"close\"\n        className={cn(\n          \"flex items-center justify-between border-t bg-muted/50 px-4 py-3\",\n          className\n        )}\n      >\n        {children}\n      </div>\n    );\n  }\n);\nPopoverFooter.displayName = \"PopoverFooter\";\n\ninterface PopoverCloseButtonProps {\n  className?: string;\n}\n\nconst PopoverCloseButton = React.forwardRef<\n  HTMLButtonElement,\n  PopoverCloseButtonProps\n>(({ className }, ref) => {\n  const { closePopover } = usePopover();\n\n  return (\n    <Button\n      ref={ref}\n      type=\"button\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-8 w-8\", className)}\n      onClick={closePopover}\n      aria-label=\"Close popover\"\n    >\n      <X className=\"h-4 w-4\" />\n    </Button>\n  );\n});\nPopoverCloseButton.displayName = \"PopoverCloseButton\";\n\nexport {\n  PopoverRoot,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverButton,\n  PopoverFooter,\n  PopoverCloseButton,\n};\n"
      },
      {
        "path": "popover-template/app/globals.css",
        "type": "registry:page",
        "target": "app/globals.css",
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
      },
      {
        "path": "popover-template/app/layout.tsx",
        "type": "registry:page",
        "target": "app/layout.tsx",
        "content": "import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"Popover Template\",\n  description: \"A template showcasing the popover component\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          inter.className,\n          \"min-h-screen bg-background antialiased\"\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n"
      },
      {
        "path": "popover-template/app/page.tsx",
        "type": "registry:page",
        "target": "app/page.tsx",
        "content": "\"use client\";\n\nimport { MessageSquare } from \"lucide-react\";\nimport {\n  PopoverRoot,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverButton,\n  PopoverFooter,\n  PopoverCloseButton,\n} from \"./component/popover\";\n\nexport default function PopoverPage() {\n  return (\n    <div className=\"min-h-screen w-full flex flex-col items-center justify-center p-4 gap-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Popover</h1>\n        <p className=\"text-muted-foreground\">\n          A beautiful animated popover component with smooth transitions.\n        </p>\n      </div>\n\n      <div className=\"flex flex-col items-center gap-4\">\n        <PopoverRoot>\n          <PopoverTrigger>\n            <MessageSquare className=\"h-4 w-4 mr-2\" />\n            Open Popover\n          </PopoverTrigger>\n          <PopoverContent className=\"w-[300px]\">\n            <PopoverHeader>Messages</PopoverHeader>\n            <PopoverBody>\n              <PopoverButton>\n                <MessageSquare className=\"h-4 w-4\" />\n                New Message\n              </PopoverButton>\n              <PopoverButton>\n                <MessageSquare className=\"h-4 w-4\" />\n                View All\n              </PopoverButton>\n            </PopoverBody>\n            <PopoverFooter>\n              <span className=\"text-sm text-muted-foreground\">\n                2 unread messages\n              </span>\n              <PopoverCloseButton />\n            </PopoverFooter>\n          </PopoverContent>\n        </PopoverRoot>\n      </div>\n    </div>\n  );\n}\n"
      }
    ],
    "meta": {
      "author": "codehagen",
      "path": "/registry/popover-template"
    }
  },
  {
    "name": "tweet-card-template",
    "type": "registry:block",
    "title": "Tweet Card Template",
    "description": "A template for tweet-card-template",
    "files": [
      {
        "path": "tweet-card-template/app/globals.css",
        "type": "registry:page",
        "target": "app/globals.css",
        "content": " "
      },
      {
        "path": "tweet-card-template/app/page.tsx",
        "type": "registry:page",
        "target": "app/page.tsx",
        "content": " "
      }
    ],
    "meta": {
      "author": "codehagen",
      "path": "/registry/tweet-card-template"
    }
  }
]