{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tweet-card",
  "type": "registry:ui",
  "title": "Tweet Card",
  "description": "A component for displaying Twitter/X posts with rich content and interactions.",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "react-tweet"
  ],
  "registryDependencies": [
    "button",
    "card",
    "skeleton",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/default/ui/tweet-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Card } from \"@/components/ui/card\";\nimport { Heart, MessageCircle, Twitter } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { type Tweet } from \"react-tweet/api\";\nimport { enrichTweet } from \"react-tweet\";\nimport { fetchTweet } from \"@/app/actions/tweet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Icons } from \"@/components/icons\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\ninterface TweetCardProps {\n  id: string;\n  className?: string;\n  compact?: boolean;\n  hideMedia?: boolean;\n  iconVariant?: \"twitter\" | \"x\";\n}\n\ninterface VideoVariant {\n  type: string;\n  src: string;\n  bitrate?: number;\n}\n\nfunction formatNumber(num: number): string {\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + \"M\";\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1) + \"K\";\n  }\n  return num.toString();\n}\n\nfunction truncate(str: string, length: number) {\n  if (!str || str.length <= length) return str;\n  return str.slice(0, length) + \"...\";\n}\n\nfunction TweetCardSkeleton({\n  compact,\n  className,\n}: Pick<TweetCardProps, \"compact\" | \"className\">) {\n  return (\n    <Card\n      className={cn(\n        \"flex flex-col space-y-4 p-6\",\n        {\n          \"h-[20rem]\": !compact,\n          \"h-[8rem]\": compact,\n        },\n        className\n      )}\n    >\n      <div className=\"flex items-center space-x-4\">\n        <Skeleton className=\"h-10 w-10 rounded-full\" />\n        <div className=\"space-y-2\">\n          <Skeleton className=\"h-4 w-[150px]\" />\n          <Skeleton className=\"h-3 w-[100px]\" />\n        </div>\n      </div>\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-full\" />\n        <Skeleton className=\"h-4 w-3/4\" />\n      </div>\n    </Card>\n  );\n}\n\nconst TweetCardContent = React.memo(function TweetCardContent({\n  tweet,\n  className,\n  compact = false,\n  hideMedia = false,\n  iconVariant = \"twitter\",\n}: Omit<TweetCardProps, \"id\"> & { tweet: Tweet }) {\n  const Icon = iconVariant === \"twitter\" ? Twitter : Icons.twitter;\n  const iconColor =\n    iconVariant === \"twitter\" ? \"text-[#3BA9EE]\" : \"text-foreground\";\n  const enrichedTweet = enrichTweet(tweet);\n  const {\n    user,\n    photos,\n    video,\n    entities,\n    favorite_count,\n    conversation_count,\n    url,\n    like_url,\n    reply_url,\n    created_at,\n  } = enrichedTweet;\n\n  const createdAt = new Date(created_at);\n  const hasMedia = !hideMedia && (video || (photos && photos.length > 0));\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Card\n        className={cn(\n          \"group relative overflow-hidden bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/50 transition-all duration-200 hover:shadow-lg\",\n          {\n            \"min-h-[8rem] max-h-[12rem]\": compact && !hasMedia,\n            \"max-h-[12rem]\": hideMedia,\n            \"h-fit\": !hideMedia && hasMedia,\n          },\n          className\n        )}\n      >\n        <div\n          className={cn(\"p-6\", {\n            \"pb-3\": compact,\n            \"p-4\": hideMedia || compact,\n          })}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <a\n                href={user.url}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                className=\"transition-transform duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n              >\n                <div\n                  className={cn(\n                    \"overflow-hidden border border-gray-200/50 bg-gradient-to-br from-white to-gray-50 transition-all not-prose\",\n                    {\n                      \"h-10 w-10\": !compact,\n                      \"h-8 w-8\": compact,\n                      \"rounded-full\":\n                        user.profile_image_shape === \"Circle\" ||\n                        !user.profile_image_shape,\n                      \"rounded-md\": user.profile_image_shape === \"Square\",\n                    }\n                  )}\n                >\n                  <div className=\"relative h-full w-full\">\n                    <Image\n                      alt={user.screen_name}\n                      src={user.profile_image_url_https}\n                      fill\n                      className=\"object-cover\"\n                      unoptimized\n                    />\n                  </div>\n                </div>\n              </a>\n              <div>\n                <a\n                  href={user.url}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  className=\"flex items-center font-semibold text-foreground transition-colors hover:text-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                >\n                  {truncate(user.name, compact ? 15 : 20)}\n                  {(user.verified ||\n                    user.is_blue_verified ||\n                    user.verified_type) && (\n                    <motion.svg\n                      aria-label=\"Verified Account\"\n                      className={cn(\"ml-1 inline\", {\n                        \"h-4 w-4\": !compact,\n                        \"h-3 w-3\": compact,\n                        \"text-blue-500\": user.is_blue_verified,\n                        \"text-yellow-500\": user.verified_type === \"Business\",\n                      })}\n                      viewBox=\"0 0 24 24\"\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      transition={{\n                        type: \"spring\",\n                        stiffness: 200,\n                        damping: 10,\n                      }}\n                    >\n                      <g fill=\"currentColor\">\n                        <path d=\"M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25c-.415-.165-.866-.25-1.336-.25-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5c-.145.217-.382.334-.625.334-.143 0-.288-.04-.416-.126l-.115-.094-2.415-2.415c-.293-.293-.293-.768 0-1.06s.768-.294 1.06 0l1.77 1.767 3.825-5.74c.23-.345.696-.436 1.04-.207.346.23.44.696.21 1.04z\" />\n                      </g>\n                    </motion.svg>\n                  )}\n                </a>\n                <div className=\"flex items-center space-x-1\">\n                  <a\n                    href={user.url}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    className={cn(\n                      \"text-muted-foreground transition-all duration-75 hover:text-foreground\",\n                      {\n                        \"text-sm\": !compact,\n                        \"text-xs\": compact,\n                      }\n                    )}\n                  >\n                    @{truncate(user.screen_name, compact ? 12 : 16)}\n                  </a>\n                  <span className=\"text-muted-foreground\">Â·</span>\n                  <a\n                    href={url}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    className={cn(\n                      \"text-muted-foreground transition-all duration-75 hover:text-foreground\",\n                      {\n                        \"text-sm\": !compact,\n                        \"text-xs\": compact,\n                      }\n                    )}\n                  >\n                    {createdAt.toLocaleDateString(\"en-US\", {\n                      month: \"short\",\n                      day: \"numeric\",\n                    })}\n                  </a>\n                </div>\n              </div>\n            </div>\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    asChild\n                    className=\"h-9 w-9 rounded-full p-0 hover:bg-blue-50 hover:text-blue-500\"\n                  >\n                    <a\n                      href={url}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      className=\"inline-flex items-center justify-center\"\n                    >\n                      <span className=\"sr-only\">\n                        View on {iconVariant === \"twitter\" ? \"Twitter\" : \"X\"}\n                      </span>\n                      <Icon\n                        className={cn(\n                          iconColor,\n                          \"transition-all duration-200 ease-in-out group-hover:scale-110\",\n                          {\n                            \"h-5 w-5\": !compact,\n                            \"h-4 w-4\": compact,\n                          }\n                        )}\n                      />\n                    </a>\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  View on {iconVariant === \"twitter\" ? \"Twitter\" : \"X\"}\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n\n          <div\n            className={cn(\"whitespace-pre-wrap text-foreground\", {\n              \"mb-2 mt-4 text-[15px]\": !compact,\n              \"mb-1 mt-2 text-sm\": compact,\n            })}\n          >\n            {entities.map((item, i) => {\n              switch (item.type) {\n                case \"hashtag\":\n                case \"mention\":\n                case \"url\":\n                case \"symbol\":\n                  return (\n                    <a\n                      key={i}\n                      className=\"text-blue-500 transition-colors hover:text-blue-600 hover:underline focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                      href={item.href}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {item.text}\n                    </a>\n                  );\n                case \"media\":\n                  return null;\n                default:\n                  return (\n                    <span\n                      key={i}\n                      dangerouslySetInnerHTML={{ __html: item.text }}\n                    />\n                  );\n              }\n            })}\n          </div>\n\n          {!hideMedia && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"my-3\"\n            >\n              {video && (\n                <div className=\"relative aspect-video w-full overflow-hidden rounded-lg border border-border not-prose\">\n                  {video.variants.length > 0 && (\n                    <video\n                      className=\"h-full w-full\"\n                      controls\n                      preload=\"metadata\"\n                      poster={video.poster}\n                    >\n                      {video.variants\n                        .filter((v) => v.type === \"video/mp4\")\n                        .sort(\n                          (a, b) =>\n                            ((b as VideoVariant).bitrate || 0) -\n                            ((a as VideoVariant).bitrate || 0)\n                        )\n                        .map((v, i) => (\n                          <source key={i} src={v.src} type={v.type} />\n                        ))}\n                      Your browser does not support the video tag.\n                    </video>\n                  )}\n                </div>\n              )}\n              {photos && !video && (\n                <div\n                  className={cn(\"grid gap-2 not-prose\", {\n                    \"grid-cols-1\": photos.length === 1,\n                    \"grid-cols-2\": photos.length > 1,\n                  })}\n                >\n                  {photos.map((photo, i) => (\n                    <a key={i} href={url} target=\"_blank\" rel=\"noreferrer\">\n                      <div className=\"relative aspect-video overflow-hidden rounded-lg border border-border\">\n                        <Image\n                          src={photo.url}\n                          alt={tweet.text}\n                          fill\n                          className=\"object-cover\"\n                          sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n                          unoptimized\n                        />\n                      </div>\n                    </a>\n                  ))}\n                </div>\n              )}\n            </motion.div>\n          )}\n\n          <div\n            className={cn(\n              \"flex items-center justify-center space-x-8 transition-opacity group-hover:opacity-100\",\n              {\n                \"mt-4 opacity-90\": !compact,\n                \"mt-2 opacity-75\": compact,\n              }\n            )}\n          >\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    asChild\n                    className=\"h-auto space-x-2 p-0 hover:bg-transparent\"\n                  >\n                    <motion.a\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                      className=\"group inline-flex items-center gap-1.5 text-muted-foreground/60 transition-colors hover:text-rose-500\"\n                      href={like_url}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      <Heart\n                        className={cn(\n                          \"transition-all duration-300 ease-in-out group-hover:fill-rose-500 group-hover:stroke-rose-500\",\n                          {\n                            \"h-4 w-4\": !compact,\n                            \"h-3 w-3\": compact,\n                          }\n                        )}\n                      />\n                      <span\n                        className={cn(\n                          \"font-medium transition-colors duration-300 ease-in-out group-hover:text-rose-500\",\n                          {\n                            \"text-sm\": !compact,\n                            \"text-xs\": compact,\n                          }\n                        )}\n                      >\n                        {formatNumber(favorite_count)}\n                      </span>\n                    </motion.a>\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>Like on Twitter</TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    asChild\n                    className=\"h-auto space-x-2 p-0 hover:bg-transparent\"\n                  >\n                    <motion.a\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                      className=\"group inline-flex items-center gap-1.5 text-muted-foreground/60 transition-colors hover:text-sky-500\"\n                      href={reply_url}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      <MessageCircle\n                        className={cn(\n                          \"transition-all duration-300 ease-in-out group-hover:fill-sky-500 group-hover:stroke-sky-500\",\n                          {\n                            \"h-4 w-4\": !compact,\n                            \"h-3 w-3\": compact,\n                          }\n                        )}\n                      />\n                      <span\n                        className={cn(\n                          \"font-medium transition-colors duration-300 ease-in-out group-hover:text-sky-500\",\n                          {\n                            \"text-sm\": !compact,\n                            \"text-xs\": compact,\n                          }\n                        )}\n                      >\n                        {formatNumber(conversation_count)}\n                      </span>\n                    </motion.a>\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>Reply on Twitter</TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n        </div>\n      </Card>\n    </motion.div>\n  );\n});\n\nexport function TweetCard({\n  id,\n  className,\n  compact,\n  hideMedia,\n  iconVariant = \"twitter\",\n}: TweetCardProps) {\n  const [tweet, setTweet] = React.useState<Tweet | null>(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<Error | null>(null);\n\n  React.useEffect(() => {\n    let mounted = true;\n    setIsLoading(true);\n\n    async function loadTweet() {\n      try {\n        const result = await fetchTweet(id);\n\n        if (!mounted) return;\n\n        if (\"error\" in result) {\n          throw new Error(result.error);\n        }\n\n        setTweet(result.tweet);\n      } catch (err) {\n        if (!mounted) return;\n        setError(\n          err instanceof Error ? err : new Error(\"Failed to load tweet\")\n        );\n      } finally {\n        if (mounted) {\n          setIsLoading(false);\n        }\n      }\n    }\n\n    loadTweet();\n    return () => {\n      mounted = false;\n    };\n  }, [id]);\n\n  if (isLoading) {\n    return <TweetCardSkeleton compact={compact} className={className} />;\n  }\n\n  if (error) {\n    return (\n      <Card\n        className={cn(\n          \"flex items-center justify-center p-6 text-center\",\n          {\n            \"h-[20rem]\": !compact,\n            \"h-[8rem]\": compact,\n          },\n          className\n        )}\n      >\n        <div className=\"space-y-2\">\n          <p className=\"text-sm font-medium text-muted-foreground\">\n            {error.message}\n          </p>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => window.location.reload()}\n            className=\"h-auto p-0 text-xs font-normal text-blue-500 hover:bg-transparent hover:text-blue-600\"\n          >\n            Try again\n          </Button>\n        </div>\n      </Card>\n    );\n  }\n\n  if (!tweet) {\n    return null;\n  }\n\n  return (\n    <TweetCardContent\n      tweet={tweet}\n      className={className}\n      compact={compact}\n      hideMedia={hideMedia}\n      iconVariant={iconVariant}\n    />\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}